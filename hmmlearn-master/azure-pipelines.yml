strategy:
  matrix:
    Linux_py35:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.5'
    Linux_py36:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.6'
    Linux_py37:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.7'
    Linux_py38:
      vmImage: 'ubuntu-16.04'
      pythonVersion: '3.8'
    macOS_py35:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.5'
    macOS_py36:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.6'
    macOS_py37:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.7'
    macOS_py38:
      vmImage: 'macOS-10.14'
      pythonVersion: '3.8'
    Windows_py35:
      vmImage: 'windows-2019'
      pythonVersion: '3.5'
    Windows_py36:
      vmImage: 'windows-2019'
      pythonVersion: '3.6'
    Windows_py37:
      vmImage: 'windows-2019'
      pythonVersion: '3.7'
    Windows_py38:
      vmImage: 'windows-2019'
      pythonVersion: '3.8'

pool:
  vmImage: '$(vmImage)'

steps:

- task: UsePythonVersion@0
  inputs:
    versionSpec: '$(pythonVersion)'
    architecture: 'x64'

- bash: |
    python -mpip install --upgrade pip setuptools wheel &&
      python -mpip install -ve . &&
      python -mpip install pytest pytest-cov
  displayName: 'Build & install'

- bash: |
    python -mpytest --junitxml=junit/test-results.xml --cov
  displayName: 'Test'

- task: PublishTestResults@2
  inputs:
    testResultsFiles: '**/test-results.xml'
    testRunTitle: 'Python $(pythonVersion) / $(vmImage)'
  condition: succeededOrFailed()

- bash: |
    case "$(python -c 'import sys; print(sys.platform)')" in
    win32)
      choco install codecov
      codecov -f .coverage
      ;;
    *)
      bash <(curl -s https://codecov.io/bash)
      ;;
    esac
  displayName: 'Upload to codecov.io'

- bash: |
    git clean -xdf &&
    case "$(python -c 'import sys; print(sys.platform)')" in
    linux)
      PV="${PYTHONVERSION/./}" &&
      ABI="$(python -c "import sys; print(sys.abiflags)")" &&
      docker run --volume="$(pwd)":/io:Z --workdir=/io quay.io/pypa/manylinux1_x86_64 \
        /opt/python/cp"$PV"-cp"$PV$ABI"/bin/python setup.py bdist_wheel --verbose &&
      docker run --volume="$(pwd)":/io:Z --workdir=/io quay.io/pypa/manylinux1_x86_64 \
        auditwheel --verbose repair --wheel-dir=/io/dist /io/dist/$(ls dist)
      ;;
    *)
      python setup.py bdist_wheel
      ;;
    esac
    cp -v dist/*.whl "$BUILD_ARTIFACTSTAGINGDIRECTORY"
  displayName: 'Build & upload wheels'

- task: PublishBuildArtifacts@1
  inputs:
    artifactName: 'wheels'

- task: DownloadBuildArtifacts@0
  inputs:
    artifactName: 'wheels'
